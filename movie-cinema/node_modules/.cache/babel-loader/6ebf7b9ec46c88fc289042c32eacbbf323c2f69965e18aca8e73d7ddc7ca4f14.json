{"ast":null,"code":"var _jsxFileName = \"/home/petik/Documents/Frontend/movie-cinema/src/pages/movie/Detail.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getDetailMovie } from \"../../Api\";\n\n// You could use destructuring directly in the function signature for cleaner code\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Detail = ({\n  id,\n  title,\n  overview\n}) => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await getDetailMovie();\n        setMovies(result);\n      } catch (error) {}\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Detail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ID: \", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Title: \", title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Overview: \", overview]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(Detail, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","useParams","getDetailMovie","jsxDEV","_jsxDEV","Detail","id","title","overview","_s","movies","setMovies","fetchData","result","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/petik/Documents/Frontend/movie-cinema/src/pages/movie/Detail.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {useParams} from \"react-router-dom\"\nimport { getDetailMovie } from \"../../Api\";\n\n// You could use destructuring directly in the function signature for cleaner code\nconst Detail = ({ id, title, overview }) => {\n      const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await getDetailMovie();\n        setMovies(result);\n      } catch (error) {}\n    };\n\n    fetchData();\n  }, []);\n  return (\n    <div>\n      <h1>Detail</h1>\n      {/* Use backticks for multi-line strings and to easily insert variables */}\n      <p>ID: {id}</p>\n      <p>Title: {title}</p>\n      <p>Overview: {overview}</p>\n    </div>\n  );\n};\n\n\n\nexport default Detail"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAAQC,SAAS,QAAO,kBAAkB;AAC1C,SAASC,cAAc,QAAQ,WAAW;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGA,CAAC;EAAEC,EAAE;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMX,cAAc,CAAC,CAAC;QACrCS,SAAS,CAACE,MAAM,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;IACnB,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBACER,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEff,OAAA;MAAAW,QAAA,GAAG,MAAI,EAACT,EAAE;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACff,OAAA;MAAAW,QAAA,GAAG,SAAO,EAACR,KAAK;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBf,OAAA;MAAAW,QAAA,GAAG,YAAU,EAACP,QAAQ;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACV,EAAA,CAtBIJ,MAAM;AAAAe,EAAA,GAANf,MAAM;AA0BZ,eAAeA,MAAM;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}